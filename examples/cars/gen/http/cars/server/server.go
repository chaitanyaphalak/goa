// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// cars HTTP server
//
// Command:
// $ goa gen goa.design/goa/examples/cars/design

package server

import (
	"context"
	"net/http"
	"time"

	"github.com/gorilla/websocket"
	goa "goa.design/goa"
	carssvc "goa.design/goa/examples/cars/gen/cars"
	goahttp "goa.design/goa/http"
)

// Server lists the cars service endpoint HTTP handlers.
type Server struct {
	Mounts []*MountPoint
	List   http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

type listServerStream struct {
	conn *websocket.Conn
}

// New instantiates HTTP handlers for all the cars service endpoints.
func New(
	e *carssvc.Endpoints,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
	up goahttp.Upgrader,
	connfn goahttp.ConnConfigureFunc,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"List", "GET", "/cars"},
		},
		List: NewListHandler(e.List, mux, dec, enc, eh, up, connfn),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "cars" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.List = m(s.List)
}

// Mount configures the mux to serve the cars endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountListHandler(mux, h.List)
}

// MountListHandler configures the mux to serve the "cars" service "list"
// endpoint.
func MountListHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/cars", f)
}

// NewListHandler creates a HTTP handler which loads the HTTP request and calls
// the "cars" service "list" endpoint.
func NewListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
	up goahttp.Upgrader,
	connfn goahttp.ConnConfigureFunc,
) http.Handler {
	var (
		decodeRequest = DecodeListRequest(mux, dec)
		encodeError   = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list")
		ctx = context.WithValue(ctx, goa.ServiceKey, "cars")
		payload, err := decodeRequest(r)
		if err != nil {
			eh(ctx, w, err)
			return
		}

		// Upgrade HTTP connection to websocket protocol.
		conn, err := up.Upgrade(w, r, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
		}
		if connfn != nil {
			conn = connfn(conn)
		}

		v := &carssvc.ListEndpointInput{
			Payload: payload.(*carssvc.ListPayload),
			Stream:  &listServerStream{conn: conn},
		}

		_, err = endpoint(ctx, v)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
	})
}

func (s *listServerStream) Send(c *carssvc.Car) error {
	v := NewCarResponseBody(c)
	return s.conn.WriteJSON(v)
}

func (s *listServerStream) Close() error {
	closeMsg := websocket.FormatCloseMessage(websocket.CloseNormalClosure, "end of message")
	if err := s.conn.WriteControl(websocket.CloseMessage, closeMsg, time.Now().Add(time.Second)); err != nil {
		return err
	}
	return s.conn.Close()
}
