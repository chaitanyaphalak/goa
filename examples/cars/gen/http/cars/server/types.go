// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// cars HTTP server types
//
// Command:
// $ goa gen goa.design/goa/examples/cars/design

package server

import (
	goa "goa.design/goa"
	carssvc "goa.design/goa/examples/cars/gen/cars"
)

// CarResponseBody is used to define fields on response body types.
type CarResponseBody struct {
	// The make of the car
	Make *string `form:"make,omitempty" json:"make,omitempty" xml:"make,omitempty"`
	// The car model
	Model *string `form:"model,omitempty" json:"model,omitempty" xml:"model,omitempty"`
	// The car body style
	BodyStyle *string `form:"body_style,omitempty" json:"body_style,omitempty" xml:"body_style,omitempty"`
}

// NewCarResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "cars" service.
func NewCarResponseBody(res *carssvc.Car) *CarResponseBody {
	body := &CarResponseBody{
		Make:      &res.Make,
		Model:     &res.Model,
		BodyStyle: &res.BodyStyle,
	}
	return body
}

// NewListListPayload builds a cars service list endpoint payload.
func NewListListPayload(style string) *carssvc.ListPayload {
	return &carssvc.ListPayload{
		Style: style,
	}
}

// Validate runs the validations defined on carResponseBody
func (body *CarResponseBody) Validate() (err error) {
	if body.Make == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("make", "body"))
	}
	if body.Model == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("model", "body"))
	}
	if body.BodyStyle == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("body_style", "body"))
	}
	return
}
