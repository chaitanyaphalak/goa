// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// cars client HTTP transport
//
// Command:
// $ goa gen goa.design/goa/examples/cars/design

package client

import (
	"context"
	"io"
	"net/http"

	"github.com/gorilla/websocket"
	goa "goa.design/goa"
	carssvc "goa.design/goa/examples/cars/gen/cars"
	goahttp "goa.design/goa/http"
)

// Client lists the cars service endpoint HTTP clients.
type Client struct {
	// List Doer is the HTTP client used to make requests to the list endpoint.
	ListDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme       string
	host         string
	encoder      func(*http.Request) goahttp.Encoder
	decoder      func(*http.Response) goahttp.Decoder
	dialer       goahttp.Dialer
	connConfigFn goahttp.ConnConfigureFunc
}

type listClientStream struct {
	conn *websocket.Conn
}

// NewClient instantiates HTTP clients for all the cars service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
	dialer goahttp.Dialer,
	connfn goahttp.ConnConfigureFunc,
) *Client {
	return &Client{
		ListDoer:            doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
		dialer:              dialer,
		connConfigFn:        connfn,
	}
}

// List returns an endpoint that makes HTTP requests to the cars service list
// server.
func (c *Client) List() goa.Endpoint {
	var (
		encodeRequest = EncodeListRequest(c.encoder)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}

		conn, _, err := c.dialer.Dial(req.URL.String(), req.Header)
		if err != nil {
			return nil, err
		}
		if c.connConfigFn != nil {
			conn = c.connConfigFn(conn)
		}

		p := &listClientStream{conn: conn}
		return p, nil
	}
}

func (c *listClientStream) Recv() (*carssvc.Car, error) {
	var res carssvc.Car
	err := c.conn.ReadJSON(&res)
	if websocket.IsCloseError(err, goahttp.NormalSocketCloseErrors...) {
		return nil, io.EOF
	}
	if err != nil {
		return nil, err
	}
	return &res, nil
}
